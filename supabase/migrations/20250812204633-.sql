-- Enable pgvector for embeddings
CREATE EXTENSION IF NOT EXISTS vector;

-- Knowledge base pages table
CREATE TABLE IF NOT EXISTS public.featherbot_kb_pages (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  url TEXT UNIQUE NOT NULL,
  title TEXT,
  headings_outline JSONB,
  last_modified TIMESTAMPTZ,
  language TEXT DEFAULT 'en',
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Knowledge base chunks table
CREATE TABLE IF NOT EXISTS public.featherbot_kb_chunks (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  page_id UUID NOT NULL REFERENCES public.featherbot_kb_pages(id) ON DELETE CASCADE,
  chunk_index INT NOT NULL,
  content TEXT NOT NULL,
  language TEXT DEFAULT 'en',
  embedding VECTOR(1536),
  created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

CREATE UNIQUE INDEX IF NOT EXISTS idx_kb_chunks_page_index ON public.featherbot_kb_chunks(page_id, chunk_index);
CREATE INDEX IF NOT EXISTS idx_kb_pages_language ON public.featherbot_kb_pages(language);
CREATE INDEX IF NOT EXISTS idx_kb_chunks_language ON public.featherbot_kb_chunks(language);

-- Vector index (if supported)
CREATE INDEX IF NOT EXISTS idx_kb_chunks_embedding ON public.featherbot_kb_chunks USING ivfflat (embedding vector_cosine_ops) WITH (lists = 100);

-- Events table for analytics
CREATE TABLE IF NOT EXISTS public.featherbot_events (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  event TEXT NOT NULL,
  page_url TEXT,
  locale TEXT,
  plan_context TEXT,
  confidence_score NUMERIC,
  metadata JSONB,
  user_id UUID,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Cache table for popular Q&A
CREATE TABLE IF NOT EXISTS public.featherbot_cache (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  locale TEXT NOT NULL,
  question_hash TEXT NOT NULL,
  answer TEXT NOT NULL,
  sources JSONB,
  confidence NUMERIC,
  expires_at TIMESTAMPTZ NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE UNIQUE INDEX IF NOT EXISTS idx_featherbot_cache_locale_qhash ON public.featherbot_cache(locale, question_hash);

-- Feedback table
CREATE TABLE IF NOT EXISTS public.featherbot_feedback (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  rating INT CHECK (rating BETWEEN 1 AND 5),
  comment TEXT,
  locale TEXT,
  source TEXT,
  user_id UUID,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Referrals table
CREATE TABLE IF NOT EXISTS public.featherbot_referrals (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  friend_email TEXT NOT NULL,
  sender_email TEXT,
  locale TEXT,
  source TEXT,
  consent BOOLEAN NOT NULL DEFAULT false,
  status TEXT NOT NULL DEFAULT 'pending',
  created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Match chunks RPC for vector search with language filter
CREATE OR REPLACE FUNCTION public.match_kb_chunks(
  query_embedding VECTOR(1536),
  match_count INT,
  lang TEXT
) RETURNS TABLE (
  chunk_id UUID,
  content TEXT,
  url TEXT,
  title TEXT,
  language TEXT,
  similarity DOUBLE PRECISION
) LANGUAGE plpgsql AS $$
BEGIN
  RETURN QUERY
  SELECT c.id AS chunk_id,
         c.content,
         p.url,
         p.title,
         c.language,
         1 - (c.embedding <=> query_embedding) AS similarity
  FROM public.featherbot_kb_chunks c
  JOIN public.featherbot_kb_pages p ON p.id = c.page_id
  WHERE (lang IS NULL OR c.language = lang)
  ORDER BY c.embedding <-> query_embedding
  LIMIT COALESCE(match_count, 6);
END; $$;

-- Basic RLS setup (restrict reads from anon, allow service-role bypass)
ALTER TABLE public.featherbot_kb_pages ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.featherbot_kb_chunks ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.featherbot_events ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.featherbot_cache ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.featherbot_feedback ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.featherbot_referrals ENABLE ROW LEVEL SECURITY;

-- Policies: allow inserts via anon only through edge functions (service role bypasses RLS)
DO $$ BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'featherbot_events' AND policyname = 'allow_insert_all'
  ) THEN
    CREATE POLICY "allow_insert_all" ON public.featherbot_events FOR INSERT TO anon, authenticated WITH CHECK (true);
  END IF;
END $$;

DO $$ BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'featherbot_feedback' AND policyname = 'allow_insert_all'
  ) THEN
    CREATE POLICY "allow_insert_all" ON public.featherbot_feedback FOR INSERT TO anon, authenticated WITH CHECK (true);
  END IF;
END $$;

DO $$ BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'featherbot_referrals' AND policyname = 'allow_insert_all'
  ) THEN
    CREATE POLICY "allow_insert_all" ON public.featherbot_referrals FOR INSERT TO anon, authenticated WITH CHECK (true);
  END IF;
END $$;

-- Deny selects by default (no select policies)
